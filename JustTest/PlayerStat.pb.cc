// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerStat.proto

#include "PlayerStat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PlayerStat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerKillStat_PlayerStat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlayerStat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSurviveStat_PlayerStat_2eproto;
class PlayerKillStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerKillStat> _instance;
} _PlayerKillStat_default_instance_;
class PlayerSurviveStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerSurviveStat> _instance;
} _PlayerSurviveStat_default_instance_;
class RankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankInfo> _instance;
} _RankInfo_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
static void InitDefaultsscc_info_PlayerInfo_PlayerStat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfo_default_instance_;
    new (ptr) ::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_PlayerStat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfo_PlayerStat_2eproto}, {}};

static void InitDefaultsscc_info_PlayerKillStat_PlayerStat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerKillStat_default_instance_;
    new (ptr) ::PlayerKillStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerKillStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerKillStat_PlayerStat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerKillStat_PlayerStat_2eproto}, {}};

static void InitDefaultsscc_info_PlayerSurviveStat_PlayerStat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerSurviveStat_default_instance_;
    new (ptr) ::PlayerSurviveStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerSurviveStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSurviveStat_PlayerStat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerSurviveStat_PlayerStat_2eproto}, {}};

static void InitDefaultsscc_info_RankInfo_PlayerStat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RankInfo_default_instance_;
    new (ptr) ::RankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RankInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankInfo_PlayerStat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RankInfo_PlayerStat_2eproto}, {
      &scc_info_PlayerKillStat_PlayerStat_2eproto.base,
      &scc_info_PlayerSurviveStat_PlayerStat_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PlayerStat_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PlayerStat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PlayerStat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PlayerStat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PlayerKillStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerKillStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerKillStat, kills_),
  PROTOBUF_FIELD_OFFSET(::PlayerKillStat, kills_place_),
  PROTOBUF_FIELD_OFFSET(::PlayerKillStat, nickname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerSurviveStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerSurviveStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerSurviveStat, time_survived_),
  PROTOBUF_FIELD_OFFSET(::PlayerSurviveStat, time_survived_place_),
  PROTOBUF_FIELD_OFFSET(::PlayerSurviveStat, nickname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::RankInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RankInfo, top5kill_),
  PROTOBUF_FIELD_OFFSET(::RankInfo, round5kill_),
  PROTOBUF_FIELD_OFFSET(::RankInfo, top5survive_),
  PROTOBUF_FIELD_OFFSET(::RankInfo, round5survive_),
  PROTOBUF_FIELD_OFFSET(::RankInfo, online_count_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, kills_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, time_survived_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, hash_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, live_),
  1,
  2,
  0,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::PlayerKillStat)},
  { 11, 19, sizeof(::PlayerSurviveStat)},
  { 22, 32, sizeof(::RankInfo)},
  { 37, 47, sizeof(::PlayerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerKillStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerSurviveStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerInfo_default_instance_),
};

const char descriptor_table_protodef_PlayerStat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020PlayerStat.proto\"F\n\016PlayerKillStat\022\r\n\005"
  "kills\030\001 \002(\005\022\023\n\013kills_place\030\002 \002(\005\022\020\n\010nick"
  "name\030\003 \002(\t\"Y\n\021PlayerSurviveStat\022\025\n\rtime_"
  "survived\030\001 \002(\005\022\033\n\023time_survived_place\030\002 "
  "\002(\005\022\020\n\010nickname\030\003 \002(\t\"\274\001\n\010RankInfo\022!\n\010to"
  "p5kill\030\001 \003(\0132\017.PlayerKillStat\022#\n\nround5k"
  "ill\030\002 \003(\0132\017.PlayerKillStat\022\'\n\013top5surviv"
  "e\030\003 \003(\0132\022.PlayerSurviveStat\022)\n\rround5sur"
  "vive\030\004 \003(\0132\022.PlayerSurviveStat\022\024\n\014online"
  "_count\030\005 \002(\005\"`\n\nPlayerInfo\022\r\n\005kills\030\001 \002("
  "\005\022\025\n\rtime_survived\030\002 \002(\005\022\020\n\010nickname\030\003 \002"
  "(\t\022\014\n\004hash\030\004 \002(\005\022\014\n\004live\030\005 \002(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PlayerStat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PlayerStat_2eproto_sccs[4] = {
  &scc_info_PlayerInfo_PlayerStat_2eproto.base,
  &scc_info_PlayerKillStat_PlayerStat_2eproto.base,
  &scc_info_PlayerSurviveStat_PlayerStat_2eproto.base,
  &scc_info_RankInfo_PlayerStat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PlayerStat_2eproto_once;
static bool descriptor_table_PlayerStat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerStat_2eproto = {
  &descriptor_table_PlayerStat_2eproto_initialized, descriptor_table_protodef_PlayerStat_2eproto, "PlayerStat.proto", 470,
  &descriptor_table_PlayerStat_2eproto_once, descriptor_table_PlayerStat_2eproto_sccs, descriptor_table_PlayerStat_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_PlayerStat_2eproto::offsets,
  file_level_metadata_PlayerStat_2eproto, 4, file_level_enum_descriptors_PlayerStat_2eproto, file_level_service_descriptors_PlayerStat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PlayerStat_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PlayerStat_2eproto), true);

// ===================================================================

void PlayerKillStat::InitAsDefaultInstance() {
}
class PlayerKillStat::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerKillStat>()._has_bits_);
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kills_place(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerKillStat::PlayerKillStat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerKillStat)
}
PlayerKillStat::PlayerKillStat(const PlayerKillStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&kills_, &from.kills_,
    static_cast<size_t>(reinterpret_cast<char*>(&kills_place_) -
    reinterpret_cast<char*>(&kills_)) + sizeof(kills_place_));
  // @@protoc_insertion_point(copy_constructor:PlayerKillStat)
}

void PlayerKillStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerKillStat_PlayerStat_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kills_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kills_place_) -
      reinterpret_cast<char*>(&kills_)) + sizeof(kills_place_));
}

PlayerKillStat::~PlayerKillStat() {
  // @@protoc_insertion_point(destructor:PlayerKillStat)
  SharedDtor();
}

void PlayerKillStat::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerKillStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerKillStat& PlayerKillStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerKillStat_PlayerStat_2eproto.base);
  return *internal_default_instance();
}


void PlayerKillStat::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerKillStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_place_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(kills_place_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlayerKillStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 kills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 kills_place = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kills_place(&has_bits);
          kills_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_nickname(), ptr, ctx, "PlayerKillStat.nickname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerKillStat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerKillStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 kills = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kills(), target);
  }

  // required int32 kills_place = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kills_place(), target);
  }

  // required string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerKillStat.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerKillStat)
  return target;
}

size_t PlayerKillStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerKillStat)
  size_t total_size = 0;

  if (has_nickname()) {
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  if (has_kills()) {
    // required int32 kills = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills());
  }

  if (has_kills_place()) {
    // required int32 kills_place = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills_place());
  }

  return total_size;
}
size_t PlayerKillStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerKillStat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());

    // required int32 kills = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills());

    // required int32 kills_place = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills_place());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerKillStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerKillStat)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerKillStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerKillStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerKillStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerKillStat)
    MergeFrom(*source);
  }
}

void PlayerKillStat::MergeFrom(const PlayerKillStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerKillStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_place_ = from.kills_place_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerKillStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerKillStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerKillStat::CopyFrom(const PlayerKillStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerKillStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerKillStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PlayerKillStat::InternalSwap(PlayerKillStat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kills_, other->kills_);
  swap(kills_place_, other->kills_place_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerKillStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerSurviveStat::InitAsDefaultInstance() {
}
class PlayerSurviveStat::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerSurviveStat>()._has_bits_);
  static void set_has_time_survived(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_survived_place(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerSurviveStat::PlayerSurviveStat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSurviveStat)
}
PlayerSurviveStat::PlayerSurviveStat(const PlayerSurviveStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&time_survived_, &from.time_survived_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_survived_place_) -
    reinterpret_cast<char*>(&time_survived_)) + sizeof(time_survived_place_));
  // @@protoc_insertion_point(copy_constructor:PlayerSurviveStat)
}

void PlayerSurviveStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerSurviveStat_PlayerStat_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_survived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_survived_place_) -
      reinterpret_cast<char*>(&time_survived_)) + sizeof(time_survived_place_));
}

PlayerSurviveStat::~PlayerSurviveStat() {
  // @@protoc_insertion_point(destructor:PlayerSurviveStat)
  SharedDtor();
}

void PlayerSurviveStat::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerSurviveStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSurviveStat& PlayerSurviveStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerSurviveStat_PlayerStat_2eproto.base);
  return *internal_default_instance();
}


void PlayerSurviveStat::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerSurviveStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&time_survived_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_survived_place_) -
        reinterpret_cast<char*>(&time_survived_)) + sizeof(time_survived_place_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlayerSurviveStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 time_survived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_survived(&has_bits);
          time_survived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time_survived_place = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_survived_place(&has_bits);
          time_survived_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_nickname(), ptr, ctx, "PlayerSurviveStat.nickname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerSurviveStat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSurviveStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 time_survived = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_survived(), target);
  }

  // required int32 time_survived_place = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_survived_place(), target);
  }

  // required string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerSurviveStat.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSurviveStat)
  return target;
}

size_t PlayerSurviveStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerSurviveStat)
  size_t total_size = 0;

  if (has_nickname()) {
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  if (has_time_survived()) {
    // required int32 time_survived = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived());
  }

  if (has_time_survived_place()) {
    // required int32 time_survived_place = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived_place());
  }

  return total_size;
}
size_t PlayerSurviveStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerSurviveStat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());

    // required int32 time_survived = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived());

    // required int32 time_survived_place = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived_place());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSurviveStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerSurviveStat)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSurviveStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerSurviveStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerSurviveStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerSurviveStat)
    MergeFrom(*source);
  }
}

void PlayerSurviveStat::MergeFrom(const PlayerSurviveStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerSurviveStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_survived_ = from.time_survived_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_survived_place_ = from.time_survived_place_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerSurviveStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerSurviveStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSurviveStat::CopyFrom(const PlayerSurviveStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerSurviveStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSurviveStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PlayerSurviveStat::InternalSwap(PlayerSurviveStat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_survived_, other->time_survived_);
  swap(time_survived_place_, other->time_survived_place_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSurviveStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankInfo::InitAsDefaultInstance() {
}
class RankInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RankInfo>()._has_bits_);
  static void set_has_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RankInfo::RankInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankInfo)
}
RankInfo::RankInfo(const RankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      top5kill_(from.top5kill_),
      round5kill_(from.round5kill_),
      top5survive_(from.top5survive_),
      round5survive_(from.round5survive_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  online_count_ = from.online_count_;
  // @@protoc_insertion_point(copy_constructor:RankInfo)
}

void RankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankInfo_PlayerStat_2eproto.base);
  online_count_ = 0;
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
}

void RankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankInfo& RankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankInfo_PlayerStat_2eproto.base);
  return *internal_default_instance();
}


void RankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top5kill_.Clear();
  round5kill_.Clear();
  top5survive_.Clear();
  round5survive_.Clear();
  online_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerKillStat top5kill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top5kill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlayerKillStat round5kill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_round5kill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlayerSurviveStat top5survive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top5survive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlayerSurviveStat round5survive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_round5survive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 online_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_online_count(&has_bits);
          online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerKillStat top5kill = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top5kill_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_top5kill(i), target, stream);
  }

  // repeated .PlayerKillStat round5kill = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_round5kill_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_round5kill(i), target, stream);
  }

  // repeated .PlayerSurviveStat top5survive = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top5survive_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_top5survive(i), target, stream);
  }

  // repeated .PlayerSurviveStat round5survive = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_round5survive_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_round5survive(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 online_count = 5;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_online_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankInfo)
  return target;
}

size_t RankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RankInfo)
  size_t total_size = 0;

  // required int32 online_count = 5;
  if (has_online_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerKillStat top5kill = 1;
  total_size += 1UL * this->_internal_top5kill_size();
  for (const auto& msg : this->top5kill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlayerKillStat round5kill = 2;
  total_size += 1UL * this->_internal_round5kill_size();
  for (const auto& msg : this->round5kill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlayerSurviveStat top5survive = 3;
  total_size += 1UL * this->_internal_top5survive_size();
  for (const auto& msg : this->top5survive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlayerSurviveStat round5survive = 4;
  total_size += 1UL * this->_internal_round5survive_size();
  for (const auto& msg : this->round5survive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RankInfo)
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top5kill_.MergeFrom(from.top5kill_);
  round5kill_.MergeFrom(from.round5kill_);
  top5survive_.MergeFrom(from.top5survive_);
  round5survive_.MergeFrom(from.round5survive_);
  if (from._internal_has_online_count()) {
    _internal_set_online_count(from._internal_online_count());
  }
}

void RankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->top5kill())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->round5kill())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->top5survive())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->round5survive())) return false;
  return true;
}

void RankInfo::InternalSwap(RankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  top5kill_.InternalSwap(&other->top5kill_);
  round5kill_.InternalSwap(&other->round5kill_);
  top5survive_.InternalSwap(&other->top5survive_);
  round5survive_.InternalSwap(&other->round5survive_);
  swap(online_count_, other->online_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
class PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfo>()._has_bits_);
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_survived(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PlayerInfo::PlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&kills_, &from.kills_,
    static_cast<size_t>(reinterpret_cast<char*>(&live_) -
    reinterpret_cast<char*>(&kills_)) + sizeof(live_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_PlayerStat_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kills_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&live_) -
      reinterpret_cast<char*>(&kills_)) + sizeof(live_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_PlayerStat_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&live_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 kills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time_survived = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_survived(&has_bits);
          time_survived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_nickname(), ptr, ctx, "PlayerInfo.nickname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool live = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_live(&has_bits);
          live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 kills = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kills(), target);
  }

  // required int32 time_survived = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_survived(), target);
  }

  // required string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // required int32 hash = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hash(), target);
  }

  // required bool live = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_live(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfo)
  return target;
}

size_t PlayerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfo)
  size_t total_size = 0;

  if (has_nickname()) {
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  if (has_kills()) {
    // required int32 kills = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills());
  }

  if (has_time_survived()) {
    // required int32 time_survived = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived());
  }

  if (has_hash()) {
    // required int32 hash = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hash());
  }

  if (has_live()) {
    // required bool live = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string nickname = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());

    // required int32 kills = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kills());

    // required int32 time_survived = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_survived());

    // required int32 hash = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hash());

    // required bool live = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_survived_ = from.time_survived_;
    }
    if (cached_has_bits & 0x00000008u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      live_ = from.live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kills_, other->kills_);
  swap(time_survived_, other->time_survived_);
  swap(hash_, other->hash_);
  swap(live_, other->live_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerKillStat* Arena::CreateMaybeMessage< ::PlayerKillStat >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerKillStat >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerSurviveStat* Arena::CreateMaybeMessage< ::PlayerSurviveStat >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerSurviveStat >(arena);
}
template<> PROTOBUF_NOINLINE ::RankInfo* Arena::CreateMaybeMessage< ::RankInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfo* Arena::CreateMaybeMessage< ::PlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

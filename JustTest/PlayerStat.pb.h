// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerStat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlayerStat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlayerStat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlayerStat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlayerStat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerStat_2eproto;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PlayerKillStat;
class PlayerKillStatDefaultTypeInternal;
extern PlayerKillStatDefaultTypeInternal _PlayerKillStat_default_instance_;
class PlayerSurviveStat;
class PlayerSurviveStatDefaultTypeInternal;
extern PlayerSurviveStatDefaultTypeInternal _PlayerSurviveStat_default_instance_;
class RankInfo;
class RankInfoDefaultTypeInternal;
extern RankInfoDefaultTypeInternal _RankInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerInfo* Arena::CreateMaybeMessage<::PlayerInfo>(Arena*);
template<> ::PlayerKillStat* Arena::CreateMaybeMessage<::PlayerKillStat>(Arena*);
template<> ::PlayerSurviveStat* Arena::CreateMaybeMessage<::PlayerSurviveStat>(Arena*);
template<> ::RankInfo* Arena::CreateMaybeMessage<::RankInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PlayerKillStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerKillStat) */ {
 public:
  PlayerKillStat();
  virtual ~PlayerKillStat();

  PlayerKillStat(const PlayerKillStat& from);
  PlayerKillStat(PlayerKillStat&& from) noexcept
    : PlayerKillStat() {
    *this = ::std::move(from);
  }

  inline PlayerKillStat& operator=(const PlayerKillStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerKillStat& operator=(PlayerKillStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerKillStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerKillStat* internal_default_instance() {
    return reinterpret_cast<const PlayerKillStat*>(
               &_PlayerKillStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerKillStat& a, PlayerKillStat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerKillStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerKillStat* New() const final {
    return CreateMaybeMessage<PlayerKillStat>(nullptr);
  }

  PlayerKillStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerKillStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerKillStat& from);
  void MergeFrom(const PlayerKillStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerKillStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerKillStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerStat_2eproto);
    return ::descriptor_table_PlayerStat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kKillsFieldNumber = 1,
    kKillsPlaceFieldNumber = 2,
  };
  // required string nickname = 3;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required int32 kills = 1;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::int32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 kills_place = 2;
  bool has_kills_place() const;
  private:
  bool _internal_has_kills_place() const;
  public:
  void clear_kills_place();
  ::PROTOBUF_NAMESPACE_ID::int32 kills_place() const;
  void set_kills_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kills_place() const;
  void _internal_set_kills_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerKillStat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 kills_;
  ::PROTOBUF_NAMESPACE_ID::int32 kills_place_;
  friend struct ::TableStruct_PlayerStat_2eproto;
};
// -------------------------------------------------------------------

class PlayerSurviveStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerSurviveStat) */ {
 public:
  PlayerSurviveStat();
  virtual ~PlayerSurviveStat();

  PlayerSurviveStat(const PlayerSurviveStat& from);
  PlayerSurviveStat(PlayerSurviveStat&& from) noexcept
    : PlayerSurviveStat() {
    *this = ::std::move(from);
  }

  inline PlayerSurviveStat& operator=(const PlayerSurviveStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSurviveStat& operator=(PlayerSurviveStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSurviveStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSurviveStat* internal_default_instance() {
    return reinterpret_cast<const PlayerSurviveStat*>(
               &_PlayerSurviveStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerSurviveStat& a, PlayerSurviveStat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSurviveStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSurviveStat* New() const final {
    return CreateMaybeMessage<PlayerSurviveStat>(nullptr);
  }

  PlayerSurviveStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSurviveStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSurviveStat& from);
  void MergeFrom(const PlayerSurviveStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSurviveStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerSurviveStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerStat_2eproto);
    return ::descriptor_table_PlayerStat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kTimeSurvivedFieldNumber = 1,
    kTimeSurvivedPlaceFieldNumber = 2,
  };
  // required string nickname = 3;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required int32 time_survived = 1;
  bool has_time_survived() const;
  private:
  bool _internal_has_time_survived() const;
  public:
  void clear_time_survived();
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived() const;
  void set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_survived() const;
  void _internal_set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 time_survived_place = 2;
  bool has_time_survived_place() const;
  private:
  bool _internal_has_time_survived_place() const;
  public:
  void clear_time_survived_place();
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived_place() const;
  void set_time_survived_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_survived_place() const;
  void _internal_set_time_survived_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerSurviveStat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived_place_;
  friend struct ::TableStruct_PlayerStat_2eproto;
};
// -------------------------------------------------------------------

class RankInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankInfo) */ {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);
  RankInfo(RankInfo&& from) noexcept
    : RankInfo() {
    *this = ::std::move(from);
  }

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankInfo& operator=(RankInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankInfo* internal_default_instance() {
    return reinterpret_cast<const RankInfo*>(
               &_RankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RankInfo& a, RankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RankInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankInfo* New() const final {
    return CreateMaybeMessage<RankInfo>(nullptr);
  }

  RankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerStat_2eproto);
    return ::descriptor_table_PlayerStat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTop5KillFieldNumber = 1,
    kRound5KillFieldNumber = 2,
    kTop5SurviveFieldNumber = 3,
    kRound5SurviveFieldNumber = 4,
    kOnlineCountFieldNumber = 5,
  };
  // repeated .PlayerKillStat top5kill = 1;
  int top5kill_size() const;
  private:
  int _internal_top5kill_size() const;
  public:
  void clear_top5kill();
  ::PlayerKillStat* mutable_top5kill(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >*
      mutable_top5kill();
  private:
  const ::PlayerKillStat& _internal_top5kill(int index) const;
  ::PlayerKillStat* _internal_add_top5kill();
  public:
  const ::PlayerKillStat& top5kill(int index) const;
  ::PlayerKillStat* add_top5kill();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >&
      top5kill() const;

  // repeated .PlayerKillStat round5kill = 2;
  int round5kill_size() const;
  private:
  int _internal_round5kill_size() const;
  public:
  void clear_round5kill();
  ::PlayerKillStat* mutable_round5kill(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >*
      mutable_round5kill();
  private:
  const ::PlayerKillStat& _internal_round5kill(int index) const;
  ::PlayerKillStat* _internal_add_round5kill();
  public:
  const ::PlayerKillStat& round5kill(int index) const;
  ::PlayerKillStat* add_round5kill();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >&
      round5kill() const;

  // repeated .PlayerSurviveStat top5survive = 3;
  int top5survive_size() const;
  private:
  int _internal_top5survive_size() const;
  public:
  void clear_top5survive();
  ::PlayerSurviveStat* mutable_top5survive(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >*
      mutable_top5survive();
  private:
  const ::PlayerSurviveStat& _internal_top5survive(int index) const;
  ::PlayerSurviveStat* _internal_add_top5survive();
  public:
  const ::PlayerSurviveStat& top5survive(int index) const;
  ::PlayerSurviveStat* add_top5survive();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >&
      top5survive() const;

  // repeated .PlayerSurviveStat round5survive = 4;
  int round5survive_size() const;
  private:
  int _internal_round5survive_size() const;
  public:
  void clear_round5survive();
  ::PlayerSurviveStat* mutable_round5survive(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >*
      mutable_round5survive();
  private:
  const ::PlayerSurviveStat& _internal_round5survive(int index) const;
  ::PlayerSurviveStat* _internal_add_round5survive();
  public:
  const ::PlayerSurviveStat& round5survive(int index) const;
  ::PlayerSurviveStat* add_round5survive();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >&
      round5survive() const;

  // required int32 online_count = 5;
  bool has_online_count() const;
  private:
  bool _internal_has_online_count() const;
  public:
  void clear_online_count();
  ::PROTOBUF_NAMESPACE_ID::int32 online_count() const;
  void set_online_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_count() const;
  void _internal_set_online_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RankInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat > top5kill_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat > round5kill_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat > top5survive_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat > round5survive_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_count_;
  friend struct ::TableStruct_PlayerStat_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInfo) */ {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerStat_2eproto);
    return ::descriptor_table_PlayerStat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kKillsFieldNumber = 1,
    kTimeSurvivedFieldNumber = 2,
    kHashFieldNumber = 4,
    kLiveFieldNumber = 5,
  };
  // required string nickname = 3;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required int32 kills = 1;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::int32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 time_survived = 2;
  bool has_time_survived() const;
  private:
  bool _internal_has_time_survived() const;
  public:
  void clear_time_survived();
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived() const;
  void set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_survived() const;
  void _internal_set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hash = 4;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool live = 5;
  bool has_live() const;
  private:
  bool _internal_has_live() const;
  public:
  void clear_live();
  bool live() const;
  void set_live(bool value);
  private:
  bool _internal_live() const;
  void _internal_set_live(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 kills_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_survived_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_;
  bool live_;
  friend struct ::TableStruct_PlayerStat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerKillStat

// required int32 kills = 1;
inline bool PlayerKillStat::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerKillStat::has_kills() const {
  return _internal_has_kills();
}
inline void PlayerKillStat::clear_kills() {
  kills_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKillStat::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKillStat::kills() const {
  // @@protoc_insertion_point(field_get:PlayerKillStat.kills)
  return _internal_kills();
}
inline void PlayerKillStat::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
}
inline void PlayerKillStat::set_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:PlayerKillStat.kills)
}

// required int32 kills_place = 2;
inline bool PlayerKillStat::_internal_has_kills_place() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerKillStat::has_kills_place() const {
  return _internal_has_kills_place();
}
inline void PlayerKillStat::clear_kills_place() {
  kills_place_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKillStat::_internal_kills_place() const {
  return kills_place_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKillStat::kills_place() const {
  // @@protoc_insertion_point(field_get:PlayerKillStat.kills_place)
  return _internal_kills_place();
}
inline void PlayerKillStat::_internal_set_kills_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  kills_place_ = value;
}
inline void PlayerKillStat::set_kills_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kills_place(value);
  // @@protoc_insertion_point(field_set:PlayerKillStat.kills_place)
}

// required string nickname = 3;
inline bool PlayerKillStat::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerKillStat::has_nickname() const {
  return _internal_has_nickname();
}
inline void PlayerKillStat::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerKillStat::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerKillStat.nickname)
  return _internal_nickname();
}
inline void PlayerKillStat::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:PlayerKillStat.nickname)
}
inline std::string* PlayerKillStat::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:PlayerKillStat.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PlayerKillStat::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void PlayerKillStat::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerKillStat::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerKillStat.nickname)
}
inline void PlayerKillStat::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerKillStat.nickname)
}
inline void PlayerKillStat::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerKillStat.nickname)
}
inline std::string* PlayerKillStat::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerKillStat::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerKillStat.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerKillStat::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerKillStat.nickname)
}

// -------------------------------------------------------------------

// PlayerSurviveStat

// required int32 time_survived = 1;
inline bool PlayerSurviveStat::_internal_has_time_survived() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerSurviveStat::has_time_survived() const {
  return _internal_has_time_survived();
}
inline void PlayerSurviveStat::clear_time_survived() {
  time_survived_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSurviveStat::_internal_time_survived() const {
  return time_survived_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSurviveStat::time_survived() const {
  // @@protoc_insertion_point(field_get:PlayerSurviveStat.time_survived)
  return _internal_time_survived();
}
inline void PlayerSurviveStat::_internal_set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_survived_ = value;
}
inline void PlayerSurviveStat::set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_survived(value);
  // @@protoc_insertion_point(field_set:PlayerSurviveStat.time_survived)
}

// required int32 time_survived_place = 2;
inline bool PlayerSurviveStat::_internal_has_time_survived_place() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerSurviveStat::has_time_survived_place() const {
  return _internal_has_time_survived_place();
}
inline void PlayerSurviveStat::clear_time_survived_place() {
  time_survived_place_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSurviveStat::_internal_time_survived_place() const {
  return time_survived_place_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSurviveStat::time_survived_place() const {
  // @@protoc_insertion_point(field_get:PlayerSurviveStat.time_survived_place)
  return _internal_time_survived_place();
}
inline void PlayerSurviveStat::_internal_set_time_survived_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_survived_place_ = value;
}
inline void PlayerSurviveStat::set_time_survived_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_survived_place(value);
  // @@protoc_insertion_point(field_set:PlayerSurviveStat.time_survived_place)
}

// required string nickname = 3;
inline bool PlayerSurviveStat::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerSurviveStat::has_nickname() const {
  return _internal_has_nickname();
}
inline void PlayerSurviveStat::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerSurviveStat::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerSurviveStat.nickname)
  return _internal_nickname();
}
inline void PlayerSurviveStat::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:PlayerSurviveStat.nickname)
}
inline std::string* PlayerSurviveStat::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:PlayerSurviveStat.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PlayerSurviveStat::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void PlayerSurviveStat::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSurviveStat::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerSurviveStat.nickname)
}
inline void PlayerSurviveStat::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerSurviveStat.nickname)
}
inline void PlayerSurviveStat::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerSurviveStat.nickname)
}
inline std::string* PlayerSurviveStat::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSurviveStat::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerSurviveStat.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSurviveStat::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerSurviveStat.nickname)
}

// -------------------------------------------------------------------

// RankInfo

// repeated .PlayerKillStat top5kill = 1;
inline int RankInfo::_internal_top5kill_size() const {
  return top5kill_.size();
}
inline int RankInfo::top5kill_size() const {
  return _internal_top5kill_size();
}
inline void RankInfo::clear_top5kill() {
  top5kill_.Clear();
}
inline ::PlayerKillStat* RankInfo::mutable_top5kill(int index) {
  // @@protoc_insertion_point(field_mutable:RankInfo.top5kill)
  return top5kill_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >*
RankInfo::mutable_top5kill() {
  // @@protoc_insertion_point(field_mutable_list:RankInfo.top5kill)
  return &top5kill_;
}
inline const ::PlayerKillStat& RankInfo::_internal_top5kill(int index) const {
  return top5kill_.Get(index);
}
inline const ::PlayerKillStat& RankInfo::top5kill(int index) const {
  // @@protoc_insertion_point(field_get:RankInfo.top5kill)
  return _internal_top5kill(index);
}
inline ::PlayerKillStat* RankInfo::_internal_add_top5kill() {
  return top5kill_.Add();
}
inline ::PlayerKillStat* RankInfo::add_top5kill() {
  // @@protoc_insertion_point(field_add:RankInfo.top5kill)
  return _internal_add_top5kill();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >&
RankInfo::top5kill() const {
  // @@protoc_insertion_point(field_list:RankInfo.top5kill)
  return top5kill_;
}

// repeated .PlayerKillStat round5kill = 2;
inline int RankInfo::_internal_round5kill_size() const {
  return round5kill_.size();
}
inline int RankInfo::round5kill_size() const {
  return _internal_round5kill_size();
}
inline void RankInfo::clear_round5kill() {
  round5kill_.Clear();
}
inline ::PlayerKillStat* RankInfo::mutable_round5kill(int index) {
  // @@protoc_insertion_point(field_mutable:RankInfo.round5kill)
  return round5kill_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >*
RankInfo::mutable_round5kill() {
  // @@protoc_insertion_point(field_mutable_list:RankInfo.round5kill)
  return &round5kill_;
}
inline const ::PlayerKillStat& RankInfo::_internal_round5kill(int index) const {
  return round5kill_.Get(index);
}
inline const ::PlayerKillStat& RankInfo::round5kill(int index) const {
  // @@protoc_insertion_point(field_get:RankInfo.round5kill)
  return _internal_round5kill(index);
}
inline ::PlayerKillStat* RankInfo::_internal_add_round5kill() {
  return round5kill_.Add();
}
inline ::PlayerKillStat* RankInfo::add_round5kill() {
  // @@protoc_insertion_point(field_add:RankInfo.round5kill)
  return _internal_add_round5kill();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerKillStat >&
RankInfo::round5kill() const {
  // @@protoc_insertion_point(field_list:RankInfo.round5kill)
  return round5kill_;
}

// repeated .PlayerSurviveStat top5survive = 3;
inline int RankInfo::_internal_top5survive_size() const {
  return top5survive_.size();
}
inline int RankInfo::top5survive_size() const {
  return _internal_top5survive_size();
}
inline void RankInfo::clear_top5survive() {
  top5survive_.Clear();
}
inline ::PlayerSurviveStat* RankInfo::mutable_top5survive(int index) {
  // @@protoc_insertion_point(field_mutable:RankInfo.top5survive)
  return top5survive_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >*
RankInfo::mutable_top5survive() {
  // @@protoc_insertion_point(field_mutable_list:RankInfo.top5survive)
  return &top5survive_;
}
inline const ::PlayerSurviveStat& RankInfo::_internal_top5survive(int index) const {
  return top5survive_.Get(index);
}
inline const ::PlayerSurviveStat& RankInfo::top5survive(int index) const {
  // @@protoc_insertion_point(field_get:RankInfo.top5survive)
  return _internal_top5survive(index);
}
inline ::PlayerSurviveStat* RankInfo::_internal_add_top5survive() {
  return top5survive_.Add();
}
inline ::PlayerSurviveStat* RankInfo::add_top5survive() {
  // @@protoc_insertion_point(field_add:RankInfo.top5survive)
  return _internal_add_top5survive();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >&
RankInfo::top5survive() const {
  // @@protoc_insertion_point(field_list:RankInfo.top5survive)
  return top5survive_;
}

// repeated .PlayerSurviveStat round5survive = 4;
inline int RankInfo::_internal_round5survive_size() const {
  return round5survive_.size();
}
inline int RankInfo::round5survive_size() const {
  return _internal_round5survive_size();
}
inline void RankInfo::clear_round5survive() {
  round5survive_.Clear();
}
inline ::PlayerSurviveStat* RankInfo::mutable_round5survive(int index) {
  // @@protoc_insertion_point(field_mutable:RankInfo.round5survive)
  return round5survive_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >*
RankInfo::mutable_round5survive() {
  // @@protoc_insertion_point(field_mutable_list:RankInfo.round5survive)
  return &round5survive_;
}
inline const ::PlayerSurviveStat& RankInfo::_internal_round5survive(int index) const {
  return round5survive_.Get(index);
}
inline const ::PlayerSurviveStat& RankInfo::round5survive(int index) const {
  // @@protoc_insertion_point(field_get:RankInfo.round5survive)
  return _internal_round5survive(index);
}
inline ::PlayerSurviveStat* RankInfo::_internal_add_round5survive() {
  return round5survive_.Add();
}
inline ::PlayerSurviveStat* RankInfo::add_round5survive() {
  // @@protoc_insertion_point(field_add:RankInfo.round5survive)
  return _internal_add_round5survive();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerSurviveStat >&
RankInfo::round5survive() const {
  // @@protoc_insertion_point(field_list:RankInfo.round5survive)
  return round5survive_;
}

// required int32 online_count = 5;
inline bool RankInfo::_internal_has_online_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RankInfo::has_online_count() const {
  return _internal_has_online_count();
}
inline void RankInfo::clear_online_count() {
  online_count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::_internal_online_count() const {
  return online_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::online_count() const {
  // @@protoc_insertion_point(field_get:RankInfo.online_count)
  return _internal_online_count();
}
inline void RankInfo::_internal_set_online_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  online_count_ = value;
}
inline void RankInfo::set_online_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_count(value);
  // @@protoc_insertion_point(field_set:RankInfo.online_count)
}

// -------------------------------------------------------------------

// PlayerInfo

// required int32 kills = 1;
inline bool PlayerInfo::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerInfo::has_kills() const {
  return _internal_has_kills();
}
inline void PlayerInfo::clear_kills() {
  kills_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::kills() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.kills)
  return _internal_kills();
}
inline void PlayerInfo::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
}
inline void PlayerInfo::set_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.kills)
}

// required int32 time_survived = 2;
inline bool PlayerInfo::_internal_has_time_survived() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerInfo::has_time_survived() const {
  return _internal_has_time_survived();
}
inline void PlayerInfo::clear_time_survived() {
  time_survived_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_time_survived() const {
  return time_survived_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::time_survived() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.time_survived)
  return _internal_time_survived();
}
inline void PlayerInfo::_internal_set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_survived_ = value;
}
inline void PlayerInfo::set_time_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_survived(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.time_survived)
}

// required string nickname = 3;
inline bool PlayerInfo::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.nickname)
  return _internal_nickname();
}
inline void PlayerInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.nickname)
}
inline std::string* PlayerInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:PlayerInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PlayerInfo::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void PlayerInfo::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerInfo::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerInfo.nickname)
}
inline void PlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerInfo.nickname)
}
inline void PlayerInfo::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerInfo.nickname)
}
inline std::string* PlayerInfo::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerInfo.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerInfo.nickname)
}

// required int32 hash = 4;
inline bool PlayerInfo::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerInfo::has_hash() const {
  return _internal_has_hash();
}
inline void PlayerInfo::clear_hash() {
  hash_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::hash() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.hash)
  return _internal_hash();
}
inline void PlayerInfo::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  hash_ = value;
}
inline void PlayerInfo::set_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.hash)
}

// required bool live = 5;
inline bool PlayerInfo::_internal_has_live() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerInfo::has_live() const {
  return _internal_has_live();
}
inline void PlayerInfo::clear_live() {
  live_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PlayerInfo::_internal_live() const {
  return live_;
}
inline bool PlayerInfo::live() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.live)
  return _internal_live();
}
inline void PlayerInfo::_internal_set_live(bool value) {
  _has_bits_[0] |= 0x00000010u;
  live_ = value;
}
inline void PlayerInfo::set_live(bool value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.live)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlayerStat_2eproto
